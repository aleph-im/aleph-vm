name: "Run tests on DigitalOcean Droplet"
on:
  push

jobs:
  run_debian_11:
    name: "Run in DigitalOcean Droplet with Debian 11"
    runs-on: ubuntu-latest
    concurrency: droplet-aleph-vm-debian-11

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetch the whole history for all tags and branches (required for aleph.__version__)
          fetch-depth: 0

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Setup SSH private key
        run: |
          mkdir ~/.ssh
          echo $DIGITALOCEAN_SSH_PRIVATE_KEY | base64 --decode > ~/.ssh/id_ed25519
          chmod 0700 ~/.ssh
          chmod 0600 ~/.ssh/id_ed25519
        env:
          DIGITALOCEAN_SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}

      - name: Create the Droplet
        run: |
          doctl compute droplet create \
          --image debian-11-x64 \
          --size c-2 \
          --region fra1 \
          --vpc-uuid 8c422d04-5dfa-4eca-add7-1e41b5f60d39 \
          --enable-ipv6 \
          --ssh-keys 18:09:36:58:79:44:bb:84:45:c8:6f:9a:f6:b8:0a:c5 \
          aleph-vm-ci-debian-11

      - name: Build Debian Package
        run: |
          cd packaging && make all-podman-debian-11 && cd ..
          ls packaging/target

      - name: Wait for the system to setup and boot
        run: |
          export DROPLET_IPV4="$(doctl compute droplet get aleph-vm-ci-debian-11 --output json | ./.github/scripts/extract_droplet_ipv4.py)"
          until ssh-keyscan -H ${DROPLET_IPV4}; do sleep 1; done

      - name: Install Aleph-VM on the Droplet
        run: |
          export DROPLET_IPV4="$(doctl compute droplet get aleph-vm-ci-debian-11 --output json | ./.github/scripts/extract_droplet_ipv4.py)"
          ssh-keyscan -H ${DROPLET_IPV4} > ~/.ssh/known_hosts
          
          ssh root@${DROPLET_IPV4} DEBIAN_FRONTEND=noninteractive "apt-get update"
          ssh root@${DROPLET_IPV4} DEBIAN_FRONTEND=noninteractive "apt-get upgrade -y"
          ssh root@${DROPLET_IPV4} DEBIAN_FRONTEND=noninteractive "apt-get install -y docker.io apparmor-profiles"
          ssh root@${DROPLET_IPV4} "docker run -d -p 127.0.0.1:4021:4021/tcp --restart=always --name vm-connector alephim/vm-connector:alpha"
          
          scp packaging/target/aleph-vm.debian-11.deb root@${DROPLET_IPV4}:/opt
          ssh root@${DROPLET_IPV4} DEBIAN_FRONTEND=noninteractive "apt install -y /opt/aleph-vm.debian-11.deb"
          ssh root@${DROPLET_IPV4} "echo ALEPH_VM_SUPERVISOR_HOST=0.0.0.0 >> /etc/aleph-vm/supervisor.env"
          ssh root@${DROPLET_IPV4} "systemctl restart aleph-vm-supervisor"

      - name: Test Aleph-VM on the Droplet
        run: |
          export DROPLET_IPV4="$(doctl compute droplet get aleph-vm-ci-debian-11 --output json | ./.github/scripts/extract_droplet_ipv4.py)"
          
          sleep 3
          curl --retry 5 --max-time 10 --fail "http://${DROPLET_IPV4}:4020/about/usage/system"
          curl --retry 5 --max-time 10 --fail "http://${DROPLET_IPV4}:4020/status/check/fastapi"

      - name: Cleanup
        if: always()
        run: |
          doctl compute droplet delete -f aleph-vm-ci-debian-11

