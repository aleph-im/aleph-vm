name: "Build Packages"
on:
  push

jobs:
  build_deb:
    name: "Build ${{ matrix.os }} Package"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["debian-11", "debian-12", "ubuntu-22.04"]
        include:
          - os: "debian-11"
            make_target: "all-podman-debian-11"
            artifact_name: "aleph-vm.debian-11.deb"
          - os: "debian-12"
            make_target: "all-podman-debian-12"
            artifact_name: "aleph-vm.debian-12.deb"
          - os: "ubuntu-22.04"
            make_target: "all-podman-ubuntu-2204"
            artifact_name: "aleph-vm.ubuntu-22.04.deb"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch the whole history for all tags and branches (required for aleph.__version__)
          fetch-depth: 0

      - run: |
          cd packaging && make ${{ matrix.make_target }} && cd ..
          ls packaging/target

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: packaging/target/${{ matrix.artifact_name }}

  build_rootfs:
    name: "Build runtime aleph-${{ matrix.os }}-python"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["debian-11", "debian-12"]
        include:
          - os: "debian-11"
            artifact_name: "aleph-debian-11-python.squashfs"
          - os: "debian-12"
            artifact_name: "aleph-debian-12-python.squashfs"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Workaround github issue https://github.com/actions/runner-images/issues/7192
        run: sudo echo RESET grub-efi/install_devices | sudo debconf-communicate grub-pc

      - run: |
          sudo apt update
          sudo apt install -y debootstrap
          cd runtimes/aleph-${{ matrix.os }}-python && sudo ./create_disk_image.sh && cd ../..

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: runtimes/aleph-${{ matrix.os }}-python/rootfs.squashfs

  build_example_venv_volume:
    name: "Build example squashfs volume using Docker"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: |
          docker build -t aleph-vm-build-squashfs -f examples/volumes/Dockerfile examples/volumes
          docker run --rm -v "$(pwd)":/mnt aleph-vm-build-squashfs

      - uses: actions/upload-artifact@v4
        with:
          name: example-volume-venv.squashfs
          path: volume-venv.squashfs
