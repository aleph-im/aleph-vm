[build-system]
build-backend = "hatchling.build"

requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "aleph-vm"
description = "Aleph.im VM execution engine"
readme = "README.md"
keywords = [  ]
license = { file = "LICENSE" }
authors = [
  { name = "Hugo Herter", email = "git@hugoherter.com" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: aiohttp",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: System :: Distributed Computing",
]
dynamic = [ "version" ]

# Upon adding or updating dependencies, update `packaging/Makefile` for the Debian package
dependencies = [
  "aiodns==3.1",
  "aiohttp==3.10.11",
  "aiohttp-cors~=0.7.0",
  "aioredis==1.3.1",
  "aiosqlite==0.19",
  "alembic==1.13.1",
  "aleph-message==0.5",
  "aleph-superfluid~=0.2.1",
  "dbus-python==1.3.2",
  "eth-account~=0.10",
  "jsonschema==4.19.1",
  "jwcrypto==1.5.6",
  "msgpack==1.0.7",
  "nftables @ git+https://salsa.debian.org/pkg-netfilter-team/pkg-nftables#egg=nftables&subdirectory=py",
  "packaging==23.2",
  # Fixing this protobuf dependency version to avoid getting CI errors as version 5.29.0 have this compilation issue
  "protobuf==5.28.3",
  "psutil==5.9.5",
  "py-cpuinfo==9",
  "pydantic[dotenv]~=1.10.13",
  "pyroute2==0.7.12",
  "python-cpuid==0.1",
  "pyyaml==6.0.1",
  "qmp==1.1",
  "schedule==1.2.1",
  "sentry-sdk==1.31",
  "setproctitle==1.3.3",
  "solathon==1.0.2",
  "sqlalchemy[asyncio]>=2",
  "systemd-python==235",
]

urls.Discussions = "https://community.aleph.im/"
urls.Documentation = "https://docs.aleph.im/nodes/compute/"
urls.Issues = "https://github.com/aleph-im/aleph-vm/issues"
urls.Source = "https://github.com/aleph-im/aleph-vm"
scripts.aleph-vm = "aleph.vm.orchestrator.cli:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = [ "src/aleph" ]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
platforms = [ "linux" ]
dependencies = [
  #  "git+https://salsa.debian.org/pkg-netfilter-team/pkg-nftables#egg=nftables&subdirectory=py",
]

[tool.hatch.envs.default.scripts]
orchestrator = "aleph-vm orchestrator run {args:--help}"
config = "aleph-vm orchestrator config {args:--help}"
check = "aleph-vm controller run {args:--help}"

[tool.hatch.envs.testing]
type = "virtual"
system-packages = true
dependencies = [
  "eth_typing==4.3.1",      # Temp fix for bug in CI with 5.0.0
  "pytest==8.2.1",
  "pytest-cov==5.0.0",
  "pytest-mock==3.14.0",
  "pytest-asyncio==0.23.7",
  "pytest-aiohttp==1.0.5",
]
[tool.hatch.envs.testing.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --durations=10 --cov  {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = [ "3.10", "3.11", "3.12" ]

[tool.hatch.envs.linting]
detached = true
dependencies = [
  "mypy==1.8.0",
  "ruff==0.4.6",
  "isort==5.13.2",
  "yamlfix==1.16.1",
  "pyproject-fmt==2.2.1",
]
[tool.hatch.envs.linting.scripts]
typing = "mypy {args:src/aleph/vm/ tests/ examples/example_fastapi runtimes/aleph-debian-12-python}"
# Check
style = [
  "ruff format --diff {args:.}",
  "isort --check-only --profile black {args:.}",
  "yamlfix --check .",
  "pyproject-fmt --check pyproject.toml",
]
# Do modification
fmt = [
  "ruff format {args:.}",
  "isort --profile black {args:.}",
  "yamlfix .",
  "pyproject-fmt pyproject.toml",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = [ "py310" ]
line-length = 120
#skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
src = [ "src" ]
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  "ISC001",
  # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/#single-line-implicit-string-concatenation-isc001
  #  # Allow non-abstract empty methods in abstract base classes
  #  "B027",
  #  # Allow boolean positional values in function calls, like `dict.get(... True)`
  #  "FBT003",
  #  # Ignore checks for possible passwords
  #  "S105", "S106", "S107",
  #  # Ignore complexity
  #  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow the use of assert statements
  "S101",
]
#[tool.ruff.flake8-tidy-imports]
#ban-relative-imports = "all"
#unfixable = [
#  # Don't touch unused imports
#  "F401",
#]

# Tests can use magic values, assertions, and relative imports
lint.per-file-ignores."tests/**/*" = [ "PLR2004", "S101", "TID252" ]

[tool.isort]
profile = "black"
extra_standard_library = [ "packaging" ]

[tool.pytest.ini_options]
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]
norecursedirs = [
  "runtimes/aleph-debian-11-python/rootfs/",
  "runtimes/aleph-debian-12-python/rootfs/",
]

[tool.coverage.run]
source_pkgs = [ "aleph.vm", "tests" ]
branch = true
parallel = true
omit = [
  "src/aleph/vm/__about__.py",
]

[tool.coverage.paths]
aleph_vm = [ "src/aleph/vm", "*/aleph-vm/src/aleph/vm" ]
tests = [ "tests", "*/aleph-vm/tests" ]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.10"
install_types = true
non_interactive = true
ignore_missing_imports = true
explicit_package_bases = true
check_untyped_defs = true

[tool.yamlfix]
sequence_style = "keep_style"
preserve_quotes = true
whitelines = 1
section_whitelines = 2
